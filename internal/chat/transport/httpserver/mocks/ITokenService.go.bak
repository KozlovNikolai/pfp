// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	domain "alfachat/internal/chat/domain"

	mock "github.com/stretchr/testify/mock"
)

// ITokenService is an autogenerated mock type for the ITokenService type
type ITokenService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: user
func (_m *ITokenService) GenerateToken(user domain.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(domain.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: token
func (_m *ITokenService) GetUser(token string) (domain.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITokenService creates a new instance of ITokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITokenService {
	mock := &ITokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
