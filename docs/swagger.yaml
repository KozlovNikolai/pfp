definitions:
  httpserver.UserRequest:
    properties:
      login:
        example: cmd@cmd.ru
        type: string
      password:
        example: "123456"
        maxLength: 32
        minLength: 6
        type: string
    required:
    - login
    - password
    type: object
  httpserver.UserResponse:
    properties:
      id:
        type: integer
      login:
        type: string
      password:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  ws.ClientRes:
    properties:
      id:
        type: string
      username:
        type: string
    type: object
  ws.CreateRoomReq:
    properties:
      id:
        example: "1"
        type: string
      name:
        example: Room1
        type: string
    type: object
  ws.RoomRes:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: An Shop service API in Go using Gin framework
  title: Shop Service API
  version: "1.0"
paths:
  /admin/users:
    get:
      description: Return users list.
      parameters:
      - default: "10"
        description: limit records on page
        example: "10"
        in: query
        name: limit
        required: true
        type: string
      - default: "0"
        description: start of record output
        example: "0"
        in: query
        name: offset
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/httpserver.UserResponse'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список всех пользователей.
      tags:
      - User
  /auth/user:
    get:
      description: Получить пользователя по его id ли логину.
      parameters:
      - default: "1"
        description: id of the user
        example: "1"
        in: query
        name: id
        type: string
      - default: cmd@cmd.ru
        description: login of the user
        example: cmd@cmd.ru
        in: query
        name: login
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httpserver.UserResponse'
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Посмотреть пользователя по его id или логину.
      tags:
      - User
  /auth/ws/createRoom:
    post:
      description: Create new room in the system.
      parameters:
      - description: Create room.
        in: body
        name: CreateRoomReq
        required: true
        schema:
          $ref: '#/definitions/ws.CreateRoomReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ws.CreateRoomReq'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: error-to-create-room
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Создать комнату.
      tags:
      - Room
  /auth/ws/getClients/{roomID}:
    get:
      description: Return room clients list.
      parameters:
      - default: 1
        description: Room ID
        example: 1
        in: path
        name: roomID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ws.ClientRes'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список всех участников группы.
      tags:
      - Room
  /auth/ws/getRooms:
    get:
      description: Return rooms list.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ws.RoomRes'
            type: array
        "404":
          description: Not Found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Получить список всех комнат.
      tags:
      - Room
  /signin:
    post:
      description: Sign in as an existing user.
      parameters:
      - description: 'SignIn user. Логин указывается в формате электронной почты.
          Пароль не меньше 6 символов. Роль: super или regular'
        in: body
        name: UserRequest
        required: true
        schema:
          $ref: '#/definitions/httpserver.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Авторизоваться.
      tags:
      - Auth
  /signup:
    post:
      description: Sign up a new user in the system.
      parameters:
      - description: 'Create user. Логин указывается в формате электронной почты.
          Пароль не меньше 6 символов. Роль: super или regular'
        in: body
        name: UserRequest
        required: true
        schema:
          $ref: '#/definitions/httpserver.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/httpserver.UserResponse'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: error-to-create-domain-user
          schema:
            type: string
      summary: Загеристрироваться.
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
